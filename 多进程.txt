#include <stdio.h>
#include <strings.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#define PORT 1234
#define BACKLOG 5
#define MAXDATASIZE 100
void process_cli(int connfd,struct sockaddr_in client);
char key[]={2,0,1,7,1,2,2,1,0,9};
int main()
{
	int listenfd,connfd;
	struct sockaddr_in server;
	struct sockaddr_in client;
	int len;
	pid_t pid;
	if((listenfd=socket(AF_INET,SOCK_STREAM,0))==-1)
	{
		perror("socket()erro.");
		exit(1);
	 } 
	 
	 int opt=SO_REUSEADDR;
	 setsockopt(listenfd,SOL_SOCKET,SO_REUSEADDR,&opt,sizeof(opt));
	 
	 bzero(&server,sizeof(server));
	 server.sin_family=AF_INET;
	 server.sin_port=htons(PORT);
	 server.sin_addr.s_addr=(INADDR_ANY);
	 if(bind(listenfd,(struct sockaddr*)&server,sizeof(server))==-1)
	 {
	 	perror("bind()error");
	 	exit(1);
	 }
	 if(listen(listenfd,BACKLOG)==-1)
	 {
	 	perror("listen error");
	 	exit(1);
	 }
	 
	 len=sizeof(client);
	 while(1){
	 
		 if((connfd=accept(listenfd,(struct sockaddr*)&client,&len))==-1)
		 {
		 	perror("accept()error\n");
		 	exit(1);
		 }
		 if((pid=fork())>0){
		 	close(connfd);
		 	continue;
		 }
		 else if(pid==0){
		 	close(listenfd);
			 process_cli(connfd,client);
			 exit(0);
			
		 }
		 else{
		 	printf("fork() error\n");
		 	exit(0);
		 }
		 close(listenfd);
	 }
}
void process_cli(int connfd,struct sockaddr_in client){
	int num;
	char recvbuf[MAXDATASIZE], sendbuf[MAXDATASIZE],
	cli_name[MAXDATASIZE];
	int i=0;
	int j=0;
	printf("You got a connection from %s.\n",inet_ntoa(client.sin_addr));
	num=recv(connfd,cli_name,MAXDATASIZE,0);
	if(num==0){
		close(connfd);
		printf("Client disconnected");
		return;
	}
	cli_name[num-1]='\0';
	printf("Client's name is %s.\n",cli_name);
	while(num=recv(connfd,recvbuf,MAXDATASIZE,0))
	{	
		recvbuf[num]='\0';
		printf("Received cient(%s) message:%s",cli_name,recvbuf);
	for(i=0;i<strlen(recvbuf)-1;i++){

		if(recvbuf[i]<='z'&&recvbuf[i]>='a'){
			recvbuf[i]=recvbuf[i]+key[j];
		}
		if(recvbuf[i]>'z'||recvbuf[i]>'Z'){
			recvbuf[i]-=26;
		}
		if(recvbuf[i]<'A'||recvbuf[i]<'a'){
			recvbuf[i]+=26;
		}
		j++;
		if(j==10){
			j=0;
		}
	sendbuf[i]=recvbuf[i];
	}
	int len=strlen(recvbuf)-1;
	int n=10-len%10;
	if(len%10!=0){
		for(i=0;i<(10-len%10);i++){
			sendbuf[len+i]=0;
			sendbuf[len+i]+=48;
			sendbuf[len+i]+=key[n];
			n++;
			if(n==10){
				n=0;
			}
		}
	}
	memset(&recvbuf,'\0',sizeof(recvbuf));
	int lenth=strlen(sendbuf);
	sendbuf[lenth]='\0';
	send(connfd,sendbuf,strlen(sendbuf),0);
	memset(&sendbuf,'\0',sizeof(sendbuf));
	//printf("%s",sendbuf);
		
	}
	close(connfd);
}
	


